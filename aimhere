-- Bypass unnecessary logging
function errorLogSpoof()
    local old; old = hookmetamethod(game, "__namecall", function(self, ...)
        local args = {...}
        if getnamecallmethod() == "FireServer" and tostring(self) == 'UDPSocket' then
            if args[1]['script'] == 'LocalScript' then
                return nil
            end
        end
        return old(self, ...)
    end)
end

errorLogSpoof()


local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Aftermath-Mahi.kagari1314",
   LoadingTitle = "Aftermath",
   LoadingSubtitle = "by kagari1314",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Aftermath"
   },
   Discord = {
      Enabled = false,
      Invite = "discord.gg/fm7cQEGYsF", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"mahi"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
local Tab1 = Window:CreateTab("Aimbot", 4483362458) -- Title, Image
local Tab2 = Window:CreateTab("Esp", 13150663725) -- Title, Image

local ToggleAimbot = Tab1:CreateToggle({
   Name = "Aimbot",
   CurrentValue = false,
   Flag = "ToggleAimbot", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().ExunysDeveloperAimbot.Settings.Enabled = Value
   end,
})

local ToggleTrigger = Tab1:CreateToggle({
   Name = "Trigger(idk)",
   CurrentValue = false,
   Flag = "ToggleTrigger", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().ExunysDeveloperAimbot.Settings.Toggle = Value
   end,
})

local ToggleTeam = Tab1:CreateToggle({
   Name = "Team Check",
   CurrentValue = false,
   Flag = "ToggleTeam", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().ExunysDeveloperAimbot.Settings.TeamCheck = Value
   end,
})


local ToggleFOV = Tab1:CreateToggle({
   Name = "Show FOV",
   CurrentValue = false,
   Flag = "ToggleFOV", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().ExunysDeveloperAimbot.FOVSettings.Visible = Value
   end,
})

local FOVChange = Tab1:CreateSlider({
   Name = "Change FOV",
   Range = {90, 300},
   Increment = 10,
   Suffix = "FOV",
   CurrentValue = 0,
   Flag = "FOVChange", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        getgenv().ExunysDeveloperAimbot.FOVSettings.Radius = Value
    end,
})

local ColorPicker = Tab1:CreateColorPicker({
    Name = "Color FOV",
    Color = Color3.fromRGB(255,255,255),
    Flag = "ColorPicker1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().ExunysDeveloperAimbot.FOVSettings.Color = Value

    end
})

local ColorPicker = Tab1:CreateColorPicker({
    Name = "Outline Color FOV",
    Color = Color3.fromRGB(255,255,255),
    Flag = "ColorPicker2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().ExunysDeveloperAimbot.FOVSettings.OutlineColor = Value

    end
})

local ColorPicker = Tab1:CreateColorPicker({
    Name = "Locked Color FOV",
    Color = Color3.fromRGB(255, 0, 0),
    Flag = "ColorPicker3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().ExunysDeveloperAimbot.FOVSettings.LockedColor = Value

    end
})

local Button = Tab2:CreateButton({
   Name = "Esp cannot be turned off",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Button = Tab2:CreateButton({
   Name = "Why?",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Button = Tab2:CreateButton({
   Name = "IDK:)",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})




local game, workspace = game, workspace
local getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick, select = getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick, select
local Vector2new, Vector3new, Vector3zero, CFramenew, Color3fromRGB, Color3fromHSV, Drawingnew, TweenInfonew = Vector2.new, Vector3.new, Vector3.zero, CFrame.new, Color3.fromRGB, Color3.fromHSV, Drawing.new, TweenInfo.new
local getupvalue, mousemoverel, tablefind, tableremove, stringlower, stringsub, mathclamp = debug.getupvalue, mousemoverel or (Input and Input.MouseMove), table.find, table.remove, string.lower, string.sub, math.clamp

local GameMetatable = getrawmetatable(game)
local __index = GameMetatable.__index
local __newindex = GameMetatable.__newindex
local GetService = __index(game, "GetService")

--// Services

local RunService = GetService(game, "RunService")
local UserInputService = GetService(game, "UserInputService")
local TweenService = GetService(game, "TweenService")
local Players = GetService(game, "Players")

--// Degrade "__index" and "__newindex" functions if the executor doesn't support "getrawmetatable" properly.

local ReciprocalRelativeSensitivity = false

if select(2, pcall(__index, Players, "LocalPlayer")) then
    ReciprocalRelativeSensitivity = true

    __index, __newindex = function(Object, Key)
        return Object[Key]
    end, function(Object, Key, Value)
        Object[Key] = Value
    end
end

--// Service Methods

local LocalPlayer = __index(Players, "LocalPlayer")
local Camera = __index(workspace, "CurrentCamera")

local FindFirstChild, FindFirstChildOfClass = __index(game, "FindFirstChild"), __index(game, "FindFirstChildOfClass")
local WorldToViewportPoint = __index(Camera, "WorldToViewportPoint")
local GetPartsObscuringTarget = __index(Camera, "GetPartsObscuringTarget")
local GetMouseLocation = __index(UserInputService, "GetMouseLocation")
local GetPlayers = __index(Players, "GetPlayers")

--// Variables

local RequiredDistance, Typing, Running, ServiceConnections, Animation, OriginalSensitivity = 2000, false, false, {}
local Connect, Disconnect, GetRenderProperty, SetRenderProperty = __index(game, "DescendantAdded").Connect

local UWP = false

do
    xpcall(function()
        local TemporaryDrawing = Drawingnew("Line")
        GetRenderProperty = getupvalue(getmetatable(TemporaryDrawing).__index, 4)
        SetRenderProperty = getupvalue(getmetatable(TemporaryDrawing).__newindex, 4)
        TemporaryDrawing.Remove(TemporaryDrawing)
    end, function()
        UWP, GetRenderProperty, SetRenderProperty = true, function(Object, Key)
            return Object[Key]
        end, function(Object, Key, Value)
            Object[Key] = Value
        end
    end)

    local TemporaryConnection = Connect(__index(game, "DescendantAdded"), function() end)
    Disconnect = TemporaryConnection.Disconnect
    Disconnect(TemporaryConnection)
end

--// Checking for multiple processes

if ExunysDeveloperAimbot then
    ExunysDeveloperAimbot:Exit()
end

--// Environment

getgenv().ExunysDeveloperAimbot = {
    DeveloperSettings = {
        UpdateMode = "RenderStepped",
        TeamCheckOption = "TeamColor",
        RainbowSpeed = 1 -- Bigger = Slower
    },

    Settings = {
        Enabled = false,

        TeamCheck = false,
        AliveCheck = true,
        WallCheck = false,

        OffsetToMoveDirection = false,
        OffsetIncrement = 15,

        Sensitivity = 0, -- Animation length (in seconds) before fully locking onto target
        Sensitivity2 = 3.5, -- mousemoverel Sensitivity

        LockMode = 1, -- 1 = CFrame; 2 = mousemoverel
        LockPart = "Head", -- Body part to lock on

        TriggerKey = Enum.UserInputType.MouseButton2,
        Toggle = false
    },

    FOVSettings = {
        Enabled = true,
        Visible = false,

        Radius = 90,
        NumSides = 60,

        Thickness = 1,
        Transparency = 1,
        Filled = false,

        RainbowColor = false,
        RainbowOutlineColor = false,
        Color = Color3fromRGB(255, 255, 255),
        OutlineColor = Color3fromRGB(255, 255, 255),
        LockedColor = Color3fromRGB(255, 0, 0)
    },

    Blacklisted = {},
    FOVCircle = Drawingnew("Circle"),
    FOVCircleOutline = Drawingnew("Circle")
}

local Environment = getgenv().ExunysDeveloperAimbot

SetRenderProperty(Environment.FOVCircle, "Visible", false)
SetRenderProperty(Environment.FOVCircleOutline, "Visible", false)

--// Core Functions

local FixUsername = function(String)
    local Result

    for _, Value in next, GetPlayers(Players) do
        local Name = __index(Value, "Name")

        if stringsub(stringlower(Name), 1, #String) == stringlower(String) then
            Result = Name
        end
    end

    return Result
end

local GetRainbowColor = function()
    local RainbowSpeed = Environment.DeveloperSettings.RainbowSpeed

    return Color3fromHSV(tick() % RainbowSpeed / RainbowSpeed, 1, 1)
end

local ConvertVector = function(Vector)
    return Vector2new(Vector.X, Vector.Y)
end

local CancelLock = function()
    Environment.Locked = nil

    local FOVCircle = UWP and Environment.FOVCircle or Environment.FOVCircle.__OBJECT

    SetRenderProperty(FOVCircle, "Color", Environment.FOVSettings.Color)
    __newindex(UserInputService, "MouseDeltaSensitivity", OriginalSensitivity)

    if Animation then
        Animation:Cancel()
    end
end

local GetClosestPlayer = function()
    local Settings = Environment.Settings
    local LockPart = Settings.LockPart

    if not Environment.Locked then
        RequiredDistance = Environment.FOVSettings.Enabled and Environment.FOVSettings.Radius or 2000

        for _, Value in next, GetPlayers(Players) do
            local Character = __index(Value, "Character")
            local Humanoid = Character and FindFirstChildOfClass(Character, "Humanoid")

            if Value ~= LocalPlayer and not tablefind(Environment.Blacklisted, __index(Value, "Name")) and Character and FindFirstChild(Character, LockPart) and Humanoid then
                local PartPosition, TeamCheckOption = __index(Character[LockPart], "Position"), Environment.DeveloperSettings.TeamCheckOption

                if Settings.TeamCheck and __index(Value, TeamCheckOption) == __index(LocalPlayer, TeamCheckOption) then
                    continue
                end

                if Settings.AliveCheck and __index(Humanoid, "Health") <= 0 then
                    continue
                end

                if Settings.WallCheck and #(GetPartsObscuringTarget(Camera, {PartPosition}, Character:GetDescendants())) > 0 then
                    continue
                end

                local Vector, OnScreen, Distance = WorldToViewportPoint(Camera, PartPosition)
                Vector = ConvertVector(Vector)
                Distance = (GetMouseLocation(UserInputService) - Vector).Magnitude

                if Distance < RequiredDistance and OnScreen then
                    RequiredDistance, Environment.Locked = Distance, Value
                end
            end
        end
    elseif (GetMouseLocation(UserInputService) - ConvertVector(WorldToViewportPoint(Camera, __index(__index(__index(Environment.Locked, "Character"), LockPart), "Position")))).Magnitude > RequiredDistance then
        CancelLock()
    end
end

local Load = function()
    OriginalSensitivity = __index(UserInputService, "MouseDeltaSensitivity")

    local Settings, FOVCircle, FOVCircleOutline, FOVSettings, Offset = Environment.Settings, Environment.FOVCircle, Environment.FOVCircleOutline, Environment.FOVSettings
    local OffsetToMoveDirection, LockPart = Settings.OffsetToMoveDirection, Settings.LockPart

    if not UWP then
        FOVCircle, FOVCircleOutline = FOVCircle.__OBJECT, FOVCircleOutline.__OBJECT
    end

    SetRenderProperty(FOVCircle, "ZIndex", 2)
    SetRenderProperty(FOVCircleOutline, "ZIndex", 1)

    ServiceConnections.RenderSteppedConnection = Connect(__index(RunService, Environment.DeveloperSettings.UpdateMode), function()
        if FOVSettings.Enabled and Settings.Enabled then
            for Index, Value in next, FOVSettings do
                if Index == "Color" then
                    continue
                end

                if pcall(GetRenderProperty, FOVCircle, Index) then
                    SetRenderProperty(FOVCircle, Index, Value)
                    SetRenderProperty(FOVCircleOutline, Index, Value)
                end
            end

            SetRenderProperty(FOVCircle, "Color", (Environment.Locked and FOVSettings.LockedColor) or FOVSettings.RainbowColor and GetRainbowColor() or FOVSettings.Color)
            SetRenderProperty(FOVCircleOutline, "Color", FOVSettings.RainbowOutlineColor and GetRainbowColor() or FOVSettings.OutlineColor)

            SetRenderProperty(FOVCircleOutline, "Thickness", FOVSettings.Thickness + 1)
            SetRenderProperty(FOVCircle, "Position", GetMouseLocation(UserInputService))
            SetRenderProperty(FOVCircleOutline, "Position", GetMouseLocation(UserInputService))
        else
            SetRenderProperty(FOVCircle, "Visible", false)
            SetRenderProperty(FOVCircleOutline, "Visible", false)
        end

        if Running and Settings.Enabled then
            GetClosestPlayer()

            Offset = OffsetToMoveDirection and __index(FindFirstChildOfClass(__index(Environment.Locked, "Character"), "Humanoid"), "MoveDirection") * (mathclamp(Settings.OffsetIncrement, 1, 30) / 10) or Vector3zero

            if Environment.Locked then
                local LockedPosition_Vector3 = __index(__index(Environment.Locked, "Character")[LockPart], "Position")
                local LockedPosition = WorldToViewportPoint(Camera, LockedPosition_Vector3 + Offset)

                local RelativeSensitivity = ReciprocalRelativeSensitivity and (1 / Settings.Sensitivity2) or Settings.Sensitivity2

                if Environment.Settings.LockMode == 2 then
                    mousemoverel((LockedPosition.X - GetMouseLocation(UserInputService).X) * RelativeSensitivity, (LockedPosition.Y - GetMouseLocation(UserInputService).Y) * RelativeSensitivity)
                else
                    if Settings.Sensitivity > 0 then
                        Animation = TweenService:Create(Camera, TweenInfonew(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFramenew(Camera.CFrame.Position, LockedPosition_Vector3)})
                        Animation:Play()
                    else
                        __newindex(Camera, "CFrame", CFramenew(Camera.CFrame.Position, LockedPosition_Vector3 + Offset))
                    end

                    __newindex(UserInputService, "MouseDeltaSensitivity", 0)
                end

                SetRenderProperty(FOVCircle, "Color", FOVSettings.LockedColor)
            end
        end
    end)

    ServiceConnections.InputBeganConnection = Connect(__index(UserInputService, "InputBegan"), function(Input)
        local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle

        if Typing then
            return
        end

        if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
            if Toggle then
                Running = not Running

                if not Running then
                    CancelLock()
                end
            else
                Running = true
            end
        end
    end)

    ServiceConnections.InputEndedConnection = Connect(__index(UserInputService, "InputEnded"), function(Input)
        local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle

        if Toggle or Typing then
            return
        end

        if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
            Running = false
            CancelLock()
        end
    end)
end

--// Typing Check

ServiceConnections.TypingStartedConnection = Connect(__index(UserInputService, "TextBoxFocused"), function()
    Typing = true
end)

ServiceConnections.TypingEndedConnection = Connect(__index(UserInputService, "TextBoxFocusReleased"), function()
    Typing = false
end)

--// Functions

function Environment.Exit(self) -- METHOD | ExunysDeveloperAimbot:Exit(<void>)
    assert(self, "EXUNYS_AIMBOT-V3.Exit: Missing parameter #1 \"self\" <table>.")

    for Index, _ in next, ServiceConnections do
        Disconnect(ServiceConnections[Index])
    end

    Load = nil; ConvertVector = nil; CancelLock = nil; GetClosestPlayer = nil; GetRainbowColor = nil; FixUsername = nil

    self.FOVCircle:Remove()
    self.FOVCircleOutline:Remove()
    getgenv().ExunysDeveloperAimbot = nil
end

function Environment.Restart() -- ExunysDeveloperAimbot.Restart(<void>)
    for Index, _ in next, ServiceConnections do 
        Disconnect(ServiceConnections[Index])
    end

    Load()
end

function Environment.Blacklist(self, Username)  -- METHOD | ExunysDeveloperAimbot:Blacklist(<string> Player Name)
    assert(self, "EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #1 \"self\" <table>.")
    assert(Username, "EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #2 \"Username\" <string>.")

    Username = FixUsername(Username)

    assert(self, "EXUNYS_AIMBOT-V3.Blacklist: User "..Username.." couldn't be found.")

    self.Blacklisted[#self.Blacklisted + 1] = Username

end

function Environment.Whitelist(self, Username) -- METHOD | ExunysDeveloperAimbot:Whitelist(<string> Player Name)
    assert(self, "EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #1 \"self\" <table>.")
    assert(Username, "EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #2 \"Username\" <string>.")

    Username = FixUsername(Username)

    assert(Username, "EXUNYS_AIMBOT-V3.Whitelist: User "..Username.." couldn't be found.")

    local Index = tablefind(self.Blacklisted, Username)

    assert(Index, "EXUNYS_AIMBOT-V3.Whitelist: User "..Username.." is not blacklisted.")

    tableremove(self.Blacklisted, Index)
end

Environment.Load = Load -- ExunysDeveloperAimbot.Load()

setmetatable(Environment, {__call = Load})
Load()
return Environment



